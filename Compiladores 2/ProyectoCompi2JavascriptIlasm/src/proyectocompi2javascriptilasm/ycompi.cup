/* ----------------------Preliminary Declarations Section--------------------*/
   
import java_cup.runtime.*;
import ArbolSentencia.*;
  
parser code {:
    
    public void report_error(String message, Object info) {
   
        StringBuffer m = new StringBuffer("Error");
   
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            if (s.left >= 0) {                
                m.append(" in line "+(s.left+1));   
                if (s.right >= 0)                    
                    m.append(", column "+(s.right+1));
            }
        }        
        m.append(" : "+message);
        System.err.println(m);
    }
   
    
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }
:};
   

   
/* ------------Declaration of Terminals and Non Terminals Section----------- */
   
terminal           IF,ELSE,FOR,TO,BEGIN,END,READ,PRINT,EQUALS,SEMI, PLUS, MINUS, TIMES, DIVIDE, LPAREN, RPAREN;
terminal Integer   NUMBER;
terminal String ID;
   
non terminal Object     l_sentencia, sentencia;
non terminal Integer    expr, factor, term;
   

   
   l_sentencia ::= l_sentencia sentencia
                |;
   
   
   sentencia ::= PRINT expr:e  SEMI
                {: System.out.println(e); :}
                 | ID:id EQUALS expr:e SEMI 
                  {:
                        Valores.getInstance().setValue(id,e);    
                   :}
                 | READ ID:id SEMI{:Valores.getInstance().readValue(id); :}
                
                 ;
   
   expr      ::= expr:e PLUS factor:f
                 {: RESULT = e + f; :}
                 |
                 expr:e MINUS factor:f
                 {: RESULT = e - f; :}
                 |
                 factor:f
                 {: RESULT = f; :}
                 ;
   
   
   factor    ::= factor:f TIMES term:t
                 {: RESULT = f*t; :}
                 |
                 factor:f DIVIDE term:t
                 {: RESULT = f / t; :}
                 |
                 term:t
                 {: RESULT = t; :}
                 ;
   
   
   term      ::= LPAREN expr:e RPAREN
                 {: RESULT = e; :}
                 |
                 NUMBER:n
                 {: RESULT = n; :}
                 |
                 ID:i
                 {: RESULT = Valores.getInstance().getValue(i); :}
                 ;
